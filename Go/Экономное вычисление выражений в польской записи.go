/*
Польская запись – это форма записи арифметических, логических и алгебраических выражений, в которой операция располагается слева от операндов. Выражения в польской записи могут обходиться без скобок, однако мы оставим скобки для наглядности.
Например, выражение x#(y$z) в польской записи выглядит как

(# x ($ y z))

Пусть в нашем случае выражения состоят из имён переменных (от a до z), круглых скобок и трёх знаков операций: #, $ и @ (смысл операций мы определять не будем).
Выражения могут содержать повторяющиеся подвыражения. Экономное вычисление таких выражений подразумевает, что повторяющиеся подвыражения вычисляются только один раз.
Требуется составить программу econom.go, вычисляющую количество операций, которые нужно выполнить для экономного вычисления выражения.
Примеры работы программы:

                 Выражение	                       Количество операций
x	                                                         0
($xy)	                                                     1
($(@ab)c)	                                                 2
(#i($jk))	                                                 2
(#($ab)($ab))	                                             2
(@(#ab)($ab))	                                             3
(#($a($b($cd)))(@($b($cd))($a($b($cd)))))	                 5
(#($(#xy)($(#ab)(#ab)))(@z($(#ab)(#ab))))	                 6
*/





package main

import (
    "fmt"
        "strings"
)

func main() {
	examples := []string{"x", "($xy)", "($(@ab)c)", "(#i($jk))", "(#($ab)($ab))", "(@(#ab)($ab))", "(#($a($b($cd)))(@($b($cd))($a($b($cd)))))", "(#($(#xy)($(#ab)(#ab)))(@z($(#ab)(#ab))))"}
	for _, x := range examples {
		s := ([]byte)(x)
		p := strings.Index(x, ")")
		k := 0
		for p != -1 {
			p -= 4
			k++
			s = ([]byte)(strings.Replace(string(s), string(s[p:p+5]), string(k), -1))
			p = strings.Index(string(s), ")")
		}
		fmt.Printf("%s - %d\n", x, k)
	}
}
