(use-syntax (ice-9 syncase))

(define (make-source seq . eof)
  (let ((a (if (not (null? eof))
               eof
               #f)))
    (cond ((string? seq) (append (string->list seq) (list a)))
          ((vector? seq) (append (vector->list seq) (list a)))
          (else (append seq (list a))))))

(define-syntax next
  (syntax-rules ()
    ((_ name) (let ((char (car name)))
                (if (and (list? (car name)) (null? (cdr name)))
                    (car char)
                    (begin (set! name (cdr name)) 
                           char))))))

(define-syntax ++
    (syntax-rules ()
      ((_ i src) (set! i (next src)))))

(define (parse vec)
  (define ERROR 1)
  (define cur 1)
  (define src (make-source vec))
  
  (define (parse-body)
    (cond ((equal? cur 'if) (list cur (let loop ((res '()))
                                        (++ cur src)
                                        (if (and cur (not (equal? cur 'endif)))
                                            (loop (cons (parse-body) res))
                                            (if (equal? cur 'endif)
                                                (reverse res)
                                                (ERROR #f))))))
          ((member cur '(end endif define)) (ERROR #f))
          ((symbol? cur) cur)
          ((number? cur) cur)
          (else (ERROR #f))))
  
  (define (parse-article)
    (cond ((equal? cur 'define) (++ cur src) (list cur (let loop ((res '()))
                                                 (++ cur src)
                                                 (if (and cur (not (equal? cur 'end)))
                                                     (loop (cons (parse-body) res))
                                                     (if (equal? cur 'end)
                                                         (begin (++ cur src) (reverse res))
                                                         (ERROR #f))))))
          (else #f)))
  
  (define (parse-articles)
    (let loop ((res '()))
      (if cur
          (let ((article (parse-article)))
            (if article
                (loop (cons article res))
                (reverse res)))
          (reverse res))))
  
  (define (parse-program)
    (list (parse-articles)
          (let loop ((res '()))
            (if cur
                (let ((body (parse-body)))
                  (++ cur src)
                  (loop (cons body res)))
                (reverse res)))))
  
  (begin (++ cur src)
         (call-with-current-continuation
          (lambda (exit) 
            (set! ERROR exit)
            (parse-program)))))
