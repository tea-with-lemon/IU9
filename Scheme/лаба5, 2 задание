(define (make-source sequence . eof)
  (let ((a (if (not (null? eof))
               eof
               (list #f))))
    (cond ((string? sequence) (append (string->list sequence) a))
          ((vector? sequence) (append (vector->list sequence) a))
          (else (append sequence a)))))

(define-syntax next
  (syntax-rules ()
    ((_ name) (let ((char (car name)))
                (if (and (list? (car name)) (null? (cdr name)))
                    (car char)
                    (begin (set! name (cdr name)) 
                           char))))))

(define-syntax peek
  (syntax-rules ()
    ((_ name) (let ((char (car name)))
                (if (and (list? (car name)) (null? (cdr name)))
                    (car char)
                    char)))))

(define (parse vec) 
  (define error 0)  
  (define s (make-source vec))
  (define (programm)
    (list (articles) (body)))
  (define (articles) ;формирует все статьи из текста
    (let ((c (peek s)));берем лексему
      (if (equal? c 'define)
          (let ((t (article)) (p (articles)))
            (if (null? p)
                (list t)
                (append (list t) p)))
          '())))
  
  (define (article)
    (let ((p (next s)) (c (next s)) (artbody (body)) (endart (next s)))
      (if (equal? endart `end)
          (list c artbody)
          (error #f))))
  
  (define (body)
    (let loop ((res '()))
      (let ((c (next s)))
        (cond
          ((equal? c 'define) (error #f))
          ((equal? (peek s) 'end) (reverse (cons c res)))
          ((equal? (peek s) 'endif) (reverse (cons c res)))
          ((equal? (peek s) #f) (reverse res));проверка на окончание потока
          ((equal? c 'if) (let ((ifbody (list (loop '()))))
                            (if (equal? (peek s) 'endif)
                                (loop (cons (cons c ifbody) res))
                                (error #f))))
          ((or (number? c) (symbol? c)) (loop (cons c res)))))))
  
  (call-with-current-continuation
   (lambda (escape)
     (begin
       (set! error escape)
       (programm)))))

(parse #(1 2 +)); ⇒ (() (1 2 +))
(parse #(x dup 0 swap if drop -1 endif))
;⇒ (() (x dup 0 swap (if (drop -1))))
(parse #( define -- 1 - end
           define =0? dup 0 = end
           define =1? dup 1 = end
           define factorial
           =0? if drop 1 exit endif
           =1? if drop 1 exit endif
           dup --
           factorial
           *
           end
           0 factorial
           1 factorial
           2 factorial
           3 factorial
           4 factorial ))
;⇒
;(((-- (1 -))
;  (=0? (dup 0 =))
;  (=1? (dup 1 =))
;  (factorial
;   (=0? (if (drop 1 exit)) =1? (if (drop 1 exit)) dup -- factorial *)))
; (0 factorial 1 factorial 2 factorial 3 factorial 4 factorial))
(parse #( define w w1 w1 w )) ; =>#f
(parse #(x dup 0 swap if drop -1 )) ; =>#f