(define (factorize expr)
  (cond ((not (equal? (length expr) 3)) expr)
        ((or (not (list? (cadr expr))) (not (list? (caddr expr)))) expr)
        ((or (not (equal? (length (cadr expr)) 3)) (not (equal? (length (caddr expr)) 3))) expr)
        (t (let ((op (car expr))
                 (op1 (caadr expr))
                 (op2 (caaddr expr))
                 (pow1 (nth 2 (cadr expr)))
                 (pow2 (nth 2 (caddr expr)))
                 (v1 (nth 1 (cadr expr)))
                 (v2 (nth 1 (caddr expr))))
                 (cond ((or (NEQ op1 'expt) (NEQ op2 'expt)) expr)
                       ((and (= pow1 2) (= pow2 2) (eq op '-)) 
                              (list '* (list '- v1 v2) (list '+ v1 v2) ))
                       ((and (= pow1 3) (= pow2 3))
                              (list '* (list op v1 v2) (list '+ (list 'expt v1 2) (list '* v1 v2) (list 'expt v2 2))))
                       (t expr)))))) 
 