g = <N, T, P, S>
<S>::=<A> a | b.
<A> ::=<S> c |.
X ∈ N}\
                 нетерминал
Y ∈ N}/
a-терминал
u, v
FIRST(u)
FIRST (Sca) = FIRST (s)= {a,b} Множество символов, с которого начинаются цепочки правила
FIRST (Aaca) = (FIRST (A)\{ε}) U FIRST (aca) = {a,b} U {a}={a,b}
FOLLOW (S) = {c, $ (знак конца последовательности)}
FOLLOW (A) = {a}
Некоторая грамматика G является LL(1)-грамматикой <=> когда для двух любых правил вида x -> u, x -> v выполняются условия:
1) FIRST (u) П FIRST (v) = 0 (пустое множество)
2) v => ε, то FIRST (u) П FOLLOW (x)=0
; Example
True ::= #t
False ::= #f
Bool ::= True|False
       ⇧
Bool ::= #(t|f)
 <UInteger> ::= <Digit>|<Digit><UInteger>.
 <Digit> ::= '0'|'1'|...|'9'.
 <Sign> ::= '+'|'-'.
 <SInteger> ::= <Sign><UInteger>|<UInteger>.
        Метод рекурсивного спуска (Recursive descent parser)
Это алгоритм синтаксического анализа, реализуемый путем последовательного вызова взаимно рекурсивных процедур, каждая из которых соответствует одному правилу контекстно свободной граммматики типа LL(k)
Разбор начинается с самого верхнего элемента грамматики (в примере с <SInteger>)

про Scheme
__parser
Expr ::= List|Atom. (Атом-часть программы, которая не может быть поделена на другие)
List ::= '(' Elem|Elem Elems) ')'.
Elems ::= Elem|Elem Elems.
Elem ::= List|Atom.
Atom ::= Number|Identifier.
__lexer
Number ::=... 
Identifier ::=...

Парсящая процедура:
-взять из входной последовательности символ (токен);
-проверить, какому терминалу из FOLLOW соответсвует символ;
         не соотв./                        \соотв.
              ошибка                       выбор правила = вызов другой парсящей процедуры
-вернуть дерево разбора
_________________________
|(|+|(|*|a|b|)|(|*|b|c|)|
            / | \                 / | \
           *  a  b               *  b  c
           
    ;вспомогательные символы    ≠ε∈∉   
Псевдо-код парсера
(1 (2 3) 4 5)                                                       
S -> TS|ε                                    
T -> n|'(' S ')'.
   число n
<List> ::= <Elem><List>.
<Elem> ::= Number|'(' List ')'.

проверяющий парсер:
parse S:
   if token ∈ FIRST (T):
      parseT()
      parseS()
parse T:
   if token = n:
      next()
   else:
      if token ≠ '(' : fail
      token <- next()
      parseS()
      if token ≠  ')' : fail
      next()
parse;
      token <- first()
      parseS()
      if token ≠ EOT: fail           EOT-end of token
         return Ok
         
возвращающий парсер:
parseS:
   if token ∈ FIRST(T):
      return(makeTree (parseT(), parseS()))
parseT:
   if token ≠ '(':fail
   next()
   node <- makeTree (parseS())
   if token ≠ ')' : fail
   next()
   return(makeTree (node))
parse:
   first()
   node <- parseS()
   if token ≠ EOT: fail
   return node

   
лексер:
loop:
   c <- next()
   cond/swith/. (c):
   c= whitespace => пропустить пробелы; loop()
   c=EOT => return Ok
   c ∈ digits => читать_число(); loop()
   .
   .
   .
   .
   else: fail()
         
          

