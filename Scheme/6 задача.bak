(define (element-of-set? x set)
  (cond ((null? set) #f)
        ((equal? x (car set)) #t)
        (else (element-of-set? x (cdr set)))))
;1
(define (list->set xs)
  (cond
    ((= (length xs) 1) xs)
    ((= (length xs) 0) '())
    ((element-of-set? (car xs) (cdr xs)) (reverse(list->set (cdr xs))))
    (else (cons (car xs) (list->set (cdr xs))))))
;2
(define (set? xs)
  (or
   (null? xs)
   (and (not (element-of-set? (car xs) (cdr xs))) (set? (cdr xs)))))
;3
(define (union xs ys)
  (reverse(list->set (append xs ys))))
;4
(define (intersection xs ys)
  (cond ((or (null? xs) (null? ys)) '())
        ((element-of-set? (car xs) ys)
         (cons (car xs)
               (intersection (cdr xs) ys)))
        (else (intersection (cdr xs) ys))))
;5
(define (difference xs ys)
  (cond ((or (null? xs) (null? ys)) '())
        ((not (element-of-set? (car xs) ys))
         (cons (car xs)
               (difference (cdr xs) ys)))
        (else (difference (cdr xs) ys))))
;6
(define (symmetric-difference xs ys)
  (difference (union xs ys) (intersection xs ys)))
;7
(define (set-eq? xs ys)
  (and (equal? (difference xs ys) '())))
        





;tests
(list->set '(1 1 2 3))                       ;⇒ (3 2 1)
(set? '(1 2 3))                              ;⇒ #t
(set? '(1 2 3 3))                            ;⇒ #f
(set? '())                                   ;⇒ #t
(union '(1 2 3) '(2 3 4))                    ;⇒ (4 3 2 1)
(intersection '(1 2 3) '(2 3 4))             ;⇒ (2 3)
(difference '(1 2 3 4 5) '(2 3))             ;⇒ (2)
(symmetric-difference '(1 2 3 4) '(3 4 5 6)) ;⇒ (6 5 2 1)
(set-eq? '(1 2 3) '(3 2 1))                  ;⇒ #t
(set-eq? '(1 2) '(1 3))                      ;⇒ #f
(set-eq?'(1 2 3) '(1 2 3 4))                 ;⇒ #f
(set-eq?'(1 2 3 4) '(1 2 3))                 ;⇒ #f
(set-eq? (list->set (quote ())) (quote ()))  ;⇒ #t
  