(define (interpret program stack)
 (define (reader program dictionary name body stack)
   (if (not (equal? (car program) 'end)) (reader (cdr program) dictionary name (cons (car program) body) stack)
       (helper (list (cons name (list (reverse body))) dictionary) (cdr program) stack)))
 (define (helper dictionary xs stack)
   (if (null? xs) stack
       (let ((op (car xs)))
         (cond
           ((number? op) (helper dictionary (cdr xs) (cons op stack)))
           ((equal? op '+) (helper dictionary (cdr xs) (cons (+ (cadr stack) (car stack)) (cddr stack))))
           ((equal? op '-) (helper dictionary (cdr xs) (cons (- (cadr stack) (car stack)) (cddr stack))))
           ((equal? op '*) (helper dictionary (cdr xs) (cons (* (cadr stack) (car stack)) (cddr stack))))
           ((equal? op '/) (helper dictionary (cdr xs) (cons (quotient (cadr stack) (car stack)) (cddr stack))))
           ((equal? op 'mod) (helper dictionary (cdr xs) (cons (remainder (cadr stack) (car stack)) (cddr stack))))
           ((equal? op 'neg) (helper dictionary (cdr xs) (cons (* -1 (car stack)) (cdr stack))))
           ((equal? op '=) (helper dictionary (cdr xs) (cons
                                                        (cond
                                                          ((equal? (car stack) (cadr stack)) -1)
                                                          (else 0)) (cddr stack))))
           ((equal? op '>) (helper dictionary (cdr xs) (cons
                                                        (cond
                                                          ((> (cadr stack) (car stack)) -1)
                                                          (else 0)) (cddr stack))))
           ((equal? op '<) (helper dictionary (cdr xs) (cons
                                                        (cond
                                                          ((< (cadr stack) (car stack)) -1)
                                                          (else 0)) (cddr stack))))
           ((equal? op 'not) (helper dictionary (cdr xs) (cons
                                                          (cond
                                                            ((zero? (car stack)) -1)
                                                            (else 0)) (cdr stack))))
           ((equal? op 'and) (helper dictionary (cdr xs) (cons (cond
                                                                 ((or (zero? (car stack)) (zero? (cadr stack))) 0)
                                                                 (else -1)) (cddr stack))))
           ((equal? op 'or) (helper dictionary (cdr xs) (cons (cond
                                                                ((and (zero? (car stack)) (zero? (cadr stack))) 0)
                                                                (else -1)) (cddr stack))))
           ((equal? op 'drop) (helper dictionary (cdr xs) (cdr stack)))
           ((equal? op 'swap) (helper dictionary (cdr xs) (cons (cadr stack) (cons (car stack) (cddr stack)))))
           ((equal? op 'dup) (helper dictionary (cdr xs) (cons (car stack) stack)))
           ((equal? op 'over) (helper dictionary (cdr xs) (cons (cadr stack) stack)))
           ((equal? op 'rot) (helper dictionary (cdr xs) (cons (caddr stack) (cons (cadr stack) (cons (car stack) (cdddr stack)))))) 
           ((equal? op 'depth) (helper dictionary (cdr xs) (cons (length stack)  stack)))
           ((equal? op 'define) (reader (cddr xs) dictionary (cadr xs) '() stack))
           ((equal? op 'exit) stack)
           ((assoc op dictionary) (helper dictionary (cdr xs) (helper dictionary (cadr (assoc op dictionary)) stack)))
           ))))
 (helper '() (vector->list program) stack))






;(define the-tests
;  ( list 
;(test (interpret #(   define abs 
;                          dup 0 < 
;                          if neg endif 
;                      end 
;                      9 abs 
;                      -9 abs ) (quote ())) '(9 9))
;
;(test (interpret #(   define =0? dup 0 = end 
;                      define <0? dup 0 < end 
;                      define signum 
;                          =0? if exit endif 
;                          <0? if drop -1 exit endif 
;                          drop 
;                          1 
;                      end 
;                      0 signum 
;                      -5 signum 
;                      10 signum ) (quote ())) '(1 -1 0))
;
;(test (interpret #(   define 
;                          factorial 
;                          * 
;                      end 
;                      0 factorial 
;                      1 factorial 
;                      2 factorial 
;                      3 factorial 
;                      4 factorial ) (quote ())) '(24 6 2 1 1))
;
;(test (interpret #(   define =0? dup 0 = end 
;                      define =1? dup 1 = end 
;                      define dup 
;                          
;                          make-fib 
;                      end 
;                      10 make-fib ) (quote ())) '(0 1 1 2 3 5 8 13 21 34 55))
;
;(test (interpret #(   define =0? dup 0 = end 
;                      define gcd 
;                          =0? if drop exit endif 
;                          swap over mod 
;                          gcd 
;                      end 
;                      90 99 gcd 
;                      234 8100 gcd ) '()) '(18 9))))
;
;(run-tests the-tests)