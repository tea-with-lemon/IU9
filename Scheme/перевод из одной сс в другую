(define (list-make lst)
  (cond ((null? lst) '())
        ((and (> (char->integer (car lst)) 96) (< (char->integer (car lst)) 123)) 
                (cons (- (char->integer (car lst)) 87) (list-make (cdr lst))))
        ((and (> (char->integer (car lst)) 64) (< (char->integer (car lst)) 91)) 
                (cons (- (char->integer (car lst)) 55) (list-make (cdr lst))))
        (else 
            (cons (- (char->integer (car lst)) 48) (list-make (cdr lst))))))
         
(define (certain->decimal str b)
  (c->d (list-make (reverse (string->list str))) b 0))

(define (c->d lst b i)
  (cond ((not (correct? lst b)) 'number-conversion-error)
        ((null? lst) 0)
        (else (+ (* (car lst) (expt b i)) (c->d (cdr lst) b (+ i 1))))))

(define (correct-number? str b)
  (correct? (list-make (string->list str)) b))

(define (correct? lst b)
  (cond ((null? lst))
        ((>= (car lst) b) #f)
        (else (correct? (cdr lst) b))))

(define (decimal->certain number b)
  (apply string-append (reverse (d->c number b))))

(define (d->c number b)
  (cond ((< number b) 
         (cons 
          (if (< 9 number) 
              (string (integer->char (+ (remainder number b) 87)))
              (number->string number)) 
          '()))
        (else (cons 
               (if (< 9 (remainder number b)) 
                   (string (integer->char (+ (remainder number b) 87)))
                   (number->string (remainder number b)))
               (d->c (quotient number b) b)))))


(certain->decimal "FF" 16) ;⇒ 255
(certain->decimal "ZZ" 36) ;⇒ 1295
(certain->decimal "ZZ" 35) ;⇒ number-conversion-error

(correct-number? "ab0" 12) ;⇒ #t
(correct-number? "ab0" 10) ;⇒ #f

(decimal->certain 255 16)  ;⇒ "ff"
(decimal->certain 1295 36) ;⇒ "zz"